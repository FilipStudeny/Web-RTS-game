// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: scenario.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "scenario";

/** --- Objective --- */
export enum ObjectiveState {
  NEUTRAL = 0,
  CAPTURING = 1,
  CAPTURED = 2,
  UNRECOGNIZED = -1,
}

export function objectiveStateFromJSON(object: any): ObjectiveState {
  switch (object) {
    case 0:
    case "NEUTRAL":
      return ObjectiveState.NEUTRAL;
    case 1:
    case "CAPTURING":
      return ObjectiveState.CAPTURING;
    case 2:
    case "CAPTURED":
      return ObjectiveState.CAPTURED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ObjectiveState.UNRECOGNIZED;
  }
}

export function objectiveStateToJSON(object: ObjectiveState): string {
  switch (object) {
    case ObjectiveState.NEUTRAL:
      return "NEUTRAL";
    case ObjectiveState.CAPTURING:
      return "CAPTURING";
    case ObjectiveState.CAPTURED:
      return "CAPTURED";
    case ObjectiveState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** --- Unit --- */
export enum UnitSide {
  BLUE = 0,
  RED = 1,
  UNRECOGNIZED = -1,
}

export function unitSideFromJSON(object: any): UnitSide {
  switch (object) {
    case 0:
    case "BLUE":
      return UnitSide.BLUE;
    case 1:
    case "RED":
      return UnitSide.RED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UnitSide.UNRECOGNIZED;
  }
}

export function unitSideToJSON(object: UnitSide): string {
  switch (object) {
    case UnitSide.BLUE:
      return "BLUE";
    case UnitSide.RED:
      return "RED";
    case UnitSide.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** --- Position and Geometry --- */
export interface Position {
  lon: number;
  lat: number;
}

export interface Ring {
  points: Position[];
}

export interface Objective {
  id?: string | undefined;
  letter: string;
  state: ObjectiveState;
  position: Position | undefined;
}

export interface Unit {
  id?: string | undefined;
  position: Position | undefined;
  unitKey: string;
  side: UnitSide;
  icon: string;
}

/** --- Area --- */
export interface ScenarioArea {
  id?: string | undefined;
  type: string;
  coordinates: Ring[];
}

/** --- Scenario Model --- */
export interface Scenario {
  name?: string | undefined;
  objectives: Objective[];
  units: Unit[];
  areas: ScenarioArea[];
}

/** Create a new scenario */
export interface CreateScenarioRequest {
  scenario: Scenario | undefined;
}

export interface CreateScenarioResponse {
  scenarioId: string;
}

/** Get a scenario by ID */
export interface GetScenarioRequest {
  scenarioId: string;
}

export interface GetScenarioResponse {
  scenario: Scenario | undefined;
}

/** Summarized scenario listing */
export interface ScenarioSummary {
  scenarioId: string;
  name: string;
}

/** List of all available scenarios */
export interface ScenarioList {
  scenarios: ScenarioSummary[];
}

function createBasePosition(): Position {
  return { lon: 0, lat: 0 };
}

export const Position: MessageFns<Position> = {
  encode(message: Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lon !== 0) {
      writer.uint32(9).double(message.lon);
    }
    if (message.lat !== 0) {
      writer.uint32(17).double(message.lat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.lon = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.lat = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      lon: isSet(object.lon) ? globalThis.Number(object.lon) : 0,
      lat: isSet(object.lat) ? globalThis.Number(object.lat) : 0,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.lon !== 0) {
      obj.lon = message.lon;
    }
    if (message.lat !== 0) {
      obj.lat = message.lat;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Position>, I>>(base?: I): Position {
    return Position.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Position>, I>>(object: I): Position {
    const message = createBasePosition();
    message.lon = object.lon ?? 0;
    message.lat = object.lat ?? 0;
    return message;
  },
};

function createBaseRing(): Ring {
  return { points: [] };
}

export const Ring: MessageFns<Ring> = {
  encode(message: Ring, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      Position.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ring {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.points.push(Position.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ring {
    return {
      points: globalThis.Array.isArray(object?.points) ? object.points.map((e: any) => Position.fromJSON(e)) : [],
    };
  },

  toJSON(message: Ring): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => Position.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ring>, I>>(base?: I): Ring {
    return Ring.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ring>, I>>(object: I): Ring {
    const message = createBaseRing();
    message.points = object.points?.map((e) => Position.fromPartial(e)) || [];
    return message;
  },
};

function createBaseObjective(): Objective {
  return { id: undefined, letter: "", state: 0, position: undefined };
}

export const Objective: MessageFns<Objective> = {
  encode(message: Objective, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.letter !== "") {
      writer.uint32(18).string(message.letter);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Objective {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjective();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.letter = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.position = Position.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Objective {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      letter: isSet(object.letter) ? globalThis.String(object.letter) : "",
      state: isSet(object.state) ? objectiveStateFromJSON(object.state) : 0,
      position: isSet(object.position) ? Position.fromJSON(object.position) : undefined,
    };
  },

  toJSON(message: Objective): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.letter !== "") {
      obj.letter = message.letter;
    }
    if (message.state !== 0) {
      obj.state = objectiveStateToJSON(message.state);
    }
    if (message.position !== undefined) {
      obj.position = Position.toJSON(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Objective>, I>>(base?: I): Objective {
    return Objective.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Objective>, I>>(object: I): Objective {
    const message = createBaseObjective();
    message.id = object.id ?? undefined;
    message.letter = object.letter ?? "";
    message.state = object.state ?? 0;
    message.position = (object.position !== undefined && object.position !== null)
      ? Position.fromPartial(object.position)
      : undefined;
    return message;
  },
};

function createBaseUnit(): Unit {
  return { id: undefined, position: undefined, unitKey: "", side: 0, icon: "" };
}

export const Unit: MessageFns<Unit> = {
  encode(message: Unit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(18).fork()).join();
    }
    if (message.unitKey !== "") {
      writer.uint32(26).string(message.unitKey);
    }
    if (message.side !== 0) {
      writer.uint32(32).int32(message.side);
    }
    if (message.icon !== "") {
      writer.uint32(42).string(message.icon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Unit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.position = Position.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.unitKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.side = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Unit {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      position: isSet(object.position) ? Position.fromJSON(object.position) : undefined,
      unitKey: isSet(object.unitKey) ? globalThis.String(object.unitKey) : "",
      side: isSet(object.side) ? unitSideFromJSON(object.side) : 0,
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
    };
  },

  toJSON(message: Unit): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.position !== undefined) {
      obj.position = Position.toJSON(message.position);
    }
    if (message.unitKey !== "") {
      obj.unitKey = message.unitKey;
    }
    if (message.side !== 0) {
      obj.side = unitSideToJSON(message.side);
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Unit>, I>>(base?: I): Unit {
    return Unit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Unit>, I>>(object: I): Unit {
    const message = createBaseUnit();
    message.id = object.id ?? undefined;
    message.position = (object.position !== undefined && object.position !== null)
      ? Position.fromPartial(object.position)
      : undefined;
    message.unitKey = object.unitKey ?? "";
    message.side = object.side ?? 0;
    message.icon = object.icon ?? "";
    return message;
  },
};

function createBaseScenarioArea(): ScenarioArea {
  return { id: undefined, type: "", coordinates: [] };
}

export const ScenarioArea: MessageFns<ScenarioArea> = {
  encode(message: ScenarioArea, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    for (const v of message.coordinates) {
      Ring.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScenarioArea {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScenarioArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.coordinates.push(Ring.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScenarioArea {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      coordinates: globalThis.Array.isArray(object?.coordinates)
        ? object.coordinates.map((e: any) => Ring.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ScenarioArea): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.coordinates?.length) {
      obj.coordinates = message.coordinates.map((e) => Ring.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScenarioArea>, I>>(base?: I): ScenarioArea {
    return ScenarioArea.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScenarioArea>, I>>(object: I): ScenarioArea {
    const message = createBaseScenarioArea();
    message.id = object.id ?? undefined;
    message.type = object.type ?? "";
    message.coordinates = object.coordinates?.map((e) => Ring.fromPartial(e)) || [];
    return message;
  },
};

function createBaseScenario(): Scenario {
  return { name: undefined, objectives: [], units: [], areas: [] };
}

export const Scenario: MessageFns<Scenario> = {
  encode(message: Scenario, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.objectives) {
      Objective.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.units) {
      Unit.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.areas) {
      ScenarioArea.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Scenario {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScenario();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.objectives.push(Objective.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.units.push(Unit.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.areas.push(ScenarioArea.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Scenario {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      objectives: globalThis.Array.isArray(object?.objectives)
        ? object.objectives.map((e: any) => Objective.fromJSON(e))
        : [],
      units: globalThis.Array.isArray(object?.units) ? object.units.map((e: any) => Unit.fromJSON(e)) : [],
      areas: globalThis.Array.isArray(object?.areas) ? object.areas.map((e: any) => ScenarioArea.fromJSON(e)) : [],
    };
  },

  toJSON(message: Scenario): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.objectives?.length) {
      obj.objectives = message.objectives.map((e) => Objective.toJSON(e));
    }
    if (message.units?.length) {
      obj.units = message.units.map((e) => Unit.toJSON(e));
    }
    if (message.areas?.length) {
      obj.areas = message.areas.map((e) => ScenarioArea.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Scenario>, I>>(base?: I): Scenario {
    return Scenario.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Scenario>, I>>(object: I): Scenario {
    const message = createBaseScenario();
    message.name = object.name ?? undefined;
    message.objectives = object.objectives?.map((e) => Objective.fromPartial(e)) || [];
    message.units = object.units?.map((e) => Unit.fromPartial(e)) || [];
    message.areas = object.areas?.map((e) => ScenarioArea.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateScenarioRequest(): CreateScenarioRequest {
  return { scenario: undefined };
}

export const CreateScenarioRequest: MessageFns<CreateScenarioRequest> = {
  encode(message: CreateScenarioRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scenario !== undefined) {
      Scenario.encode(message.scenario, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateScenarioRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateScenarioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scenario = Scenario.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateScenarioRequest {
    return { scenario: isSet(object.scenario) ? Scenario.fromJSON(object.scenario) : undefined };
  },

  toJSON(message: CreateScenarioRequest): unknown {
    const obj: any = {};
    if (message.scenario !== undefined) {
      obj.scenario = Scenario.toJSON(message.scenario);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateScenarioRequest>, I>>(base?: I): CreateScenarioRequest {
    return CreateScenarioRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateScenarioRequest>, I>>(object: I): CreateScenarioRequest {
    const message = createBaseCreateScenarioRequest();
    message.scenario = (object.scenario !== undefined && object.scenario !== null)
      ? Scenario.fromPartial(object.scenario)
      : undefined;
    return message;
  },
};

function createBaseCreateScenarioResponse(): CreateScenarioResponse {
  return { scenarioId: "" };
}

export const CreateScenarioResponse: MessageFns<CreateScenarioResponse> = {
  encode(message: CreateScenarioResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scenarioId !== "") {
      writer.uint32(10).string(message.scenarioId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateScenarioResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateScenarioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scenarioId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateScenarioResponse {
    return { scenarioId: isSet(object.scenarioId) ? globalThis.String(object.scenarioId) : "" };
  },

  toJSON(message: CreateScenarioResponse): unknown {
    const obj: any = {};
    if (message.scenarioId !== "") {
      obj.scenarioId = message.scenarioId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateScenarioResponse>, I>>(base?: I): CreateScenarioResponse {
    return CreateScenarioResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateScenarioResponse>, I>>(object: I): CreateScenarioResponse {
    const message = createBaseCreateScenarioResponse();
    message.scenarioId = object.scenarioId ?? "";
    return message;
  },
};

function createBaseGetScenarioRequest(): GetScenarioRequest {
  return { scenarioId: "" };
}

export const GetScenarioRequest: MessageFns<GetScenarioRequest> = {
  encode(message: GetScenarioRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scenarioId !== "") {
      writer.uint32(10).string(message.scenarioId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScenarioRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScenarioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scenarioId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScenarioRequest {
    return { scenarioId: isSet(object.scenarioId) ? globalThis.String(object.scenarioId) : "" };
  },

  toJSON(message: GetScenarioRequest): unknown {
    const obj: any = {};
    if (message.scenarioId !== "") {
      obj.scenarioId = message.scenarioId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetScenarioRequest>, I>>(base?: I): GetScenarioRequest {
    return GetScenarioRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetScenarioRequest>, I>>(object: I): GetScenarioRequest {
    const message = createBaseGetScenarioRequest();
    message.scenarioId = object.scenarioId ?? "";
    return message;
  },
};

function createBaseGetScenarioResponse(): GetScenarioResponse {
  return { scenario: undefined };
}

export const GetScenarioResponse: MessageFns<GetScenarioResponse> = {
  encode(message: GetScenarioResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scenario !== undefined) {
      Scenario.encode(message.scenario, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScenarioResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScenarioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scenario = Scenario.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScenarioResponse {
    return { scenario: isSet(object.scenario) ? Scenario.fromJSON(object.scenario) : undefined };
  },

  toJSON(message: GetScenarioResponse): unknown {
    const obj: any = {};
    if (message.scenario !== undefined) {
      obj.scenario = Scenario.toJSON(message.scenario);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetScenarioResponse>, I>>(base?: I): GetScenarioResponse {
    return GetScenarioResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetScenarioResponse>, I>>(object: I): GetScenarioResponse {
    const message = createBaseGetScenarioResponse();
    message.scenario = (object.scenario !== undefined && object.scenario !== null)
      ? Scenario.fromPartial(object.scenario)
      : undefined;
    return message;
  },
};

function createBaseScenarioSummary(): ScenarioSummary {
  return { scenarioId: "", name: "" };
}

export const ScenarioSummary: MessageFns<ScenarioSummary> = {
  encode(message: ScenarioSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scenarioId !== "") {
      writer.uint32(10).string(message.scenarioId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScenarioSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScenarioSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scenarioId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScenarioSummary {
    return {
      scenarioId: isSet(object.scenarioId) ? globalThis.String(object.scenarioId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: ScenarioSummary): unknown {
    const obj: any = {};
    if (message.scenarioId !== "") {
      obj.scenarioId = message.scenarioId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScenarioSummary>, I>>(base?: I): ScenarioSummary {
    return ScenarioSummary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScenarioSummary>, I>>(object: I): ScenarioSummary {
    const message = createBaseScenarioSummary();
    message.scenarioId = object.scenarioId ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseScenarioList(): ScenarioList {
  return { scenarios: [] };
}

export const ScenarioList: MessageFns<ScenarioList> = {
  encode(message: ScenarioList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.scenarios) {
      ScenarioSummary.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScenarioList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScenarioList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scenarios.push(ScenarioSummary.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScenarioList {
    return {
      scenarios: globalThis.Array.isArray(object?.scenarios)
        ? object.scenarios.map((e: any) => ScenarioSummary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ScenarioList): unknown {
    const obj: any = {};
    if (message.scenarios?.length) {
      obj.scenarios = message.scenarios.map((e) => ScenarioSummary.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScenarioList>, I>>(base?: I): ScenarioList {
    return ScenarioList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScenarioList>, I>>(object: I): ScenarioList {
    const message = createBaseScenarioList();
    message.scenarios = object.scenarios?.map((e) => ScenarioSummary.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
