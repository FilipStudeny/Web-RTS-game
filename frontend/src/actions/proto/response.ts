// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "common";

export enum ObjectiveState {
  NEUTRAL = 0,
  CAPTURING = 1,
  CAPTURED = 2,
  UNRECOGNIZED = -1,
}

export function objectiveStateFromJSON(object: any): ObjectiveState {
  switch (object) {
    case 0:
    case "NEUTRAL":
      return ObjectiveState.NEUTRAL;
    case 1:
    case "CAPTURING":
      return ObjectiveState.CAPTURING;
    case 2:
    case "CAPTURED":
      return ObjectiveState.CAPTURED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ObjectiveState.UNRECOGNIZED;
  }
}

export function objectiveStateToJSON(object: ObjectiveState): string {
  switch (object) {
    case ObjectiveState.NEUTRAL:
      return "NEUTRAL";
    case ObjectiveState.CAPTURING:
      return "CAPTURING";
    case ObjectiveState.CAPTURED:
      return "CAPTURED";
    case ObjectiveState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum UnitSide {
  ALLY = 0,
  ENEMY = 1,
  UNRECOGNIZED = -1,
}

export function unitSideFromJSON(object: any): UnitSide {
  switch (object) {
    case 0:
    case "ALLY":
      return UnitSide.ALLY;
    case 1:
    case "ENEMY":
      return UnitSide.ENEMY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UnitSide.UNRECOGNIZED;
  }
}

export function unitSideToJSON(object: UnitSide): string {
  switch (object) {
    case UnitSide.ALLY:
      return "ALLY";
    case UnitSide.ENEMY:
      return "ENEMY";
    case UnitSide.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Generic response structure */
export interface Response {
  /** Was the request successful */
  isError: boolean;
  /** Optional error or success message */
  message: string;
  unitTypes?: UnitTypeList | undefined;
  areas?: AreaList | undefined;
  scenario?:
    | Scenario
    | undefined;
  /** Example: if you return a string, like a UUID or token */
  id?: string | undefined;
}

/** These can be reused or imported from another .proto file */
export interface UnitTypeList {
  unitTypes: UnitType[];
}

export interface UnitType {
  type: number;
  name: string;
  description: string;
  icon: string;
  health: number;
  accuracy: number;
  sightRange: number;
  movementSpeed: number;
}

export interface AreaList {
  areas: Area[];
}

export interface Area {
  name: string;
  description: string;
  color: string;
  movementSpeedModifier: number;
  accuracyModifier: number;
  enemyMissChance: number;
}

export interface Scenario {
  name: string;
  objectives: Objective[];
  units: Unit[];
  areas: ScenarioArea[];
}

export interface Objective {
  letter: string;
  state: ObjectiveState;
  position: Position | undefined;
}

export interface Unit {
  position: Position | undefined;
  unitKey: string;
  side: UnitSide;
  icon: string;
}

export interface ScenarioArea {
  type: string;
  coordinates: Ring[];
}

export interface Ring {
  points: Position[];
}

export interface Position {
  lon: number;
  lat: number;
}

function createBaseResponse(): Response {
  return { isError: false, message: "", unitTypes: undefined, areas: undefined, scenario: undefined, id: undefined };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isError !== false) {
      writer.uint32(8).bool(message.isError);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.unitTypes !== undefined) {
      UnitTypeList.encode(message.unitTypes, writer.uint32(26).fork()).join();
    }
    if (message.areas !== undefined) {
      AreaList.encode(message.areas, writer.uint32(34).fork()).join();
    }
    if (message.scenario !== undefined) {
      Scenario.encode(message.scenario, writer.uint32(42).fork()).join();
    }
    if (message.id !== undefined) {
      writer.uint32(50).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isError = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.unitTypes = UnitTypeList.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.areas = AreaList.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.scenario = Scenario.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      isError: isSet(object.isError) ? globalThis.Boolean(object.isError) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      unitTypes: isSet(object.unitTypes) ? UnitTypeList.fromJSON(object.unitTypes) : undefined,
      areas: isSet(object.areas) ? AreaList.fromJSON(object.areas) : undefined,
      scenario: isSet(object.scenario) ? Scenario.fromJSON(object.scenario) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.isError !== false) {
      obj.isError = message.isError;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.unitTypes !== undefined) {
      obj.unitTypes = UnitTypeList.toJSON(message.unitTypes);
    }
    if (message.areas !== undefined) {
      obj.areas = AreaList.toJSON(message.areas);
    }
    if (message.scenario !== undefined) {
      obj.scenario = Scenario.toJSON(message.scenario);
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.isError = object.isError ?? false;
    message.message = object.message ?? "";
    message.unitTypes = (object.unitTypes !== undefined && object.unitTypes !== null)
      ? UnitTypeList.fromPartial(object.unitTypes)
      : undefined;
    message.areas = (object.areas !== undefined && object.areas !== null)
      ? AreaList.fromPartial(object.areas)
      : undefined;
    message.scenario = (object.scenario !== undefined && object.scenario !== null)
      ? Scenario.fromPartial(object.scenario)
      : undefined;
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBaseUnitTypeList(): UnitTypeList {
  return { unitTypes: [] };
}

export const UnitTypeList: MessageFns<UnitTypeList> = {
  encode(message: UnitTypeList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.unitTypes) {
      UnitType.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnitTypeList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnitTypeList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unitTypes.push(UnitType.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnitTypeList {
    return {
      unitTypes: globalThis.Array.isArray(object?.unitTypes)
        ? object.unitTypes.map((e: any) => UnitType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UnitTypeList): unknown {
    const obj: any = {};
    if (message.unitTypes?.length) {
      obj.unitTypes = message.unitTypes.map((e) => UnitType.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnitTypeList>, I>>(base?: I): UnitTypeList {
    return UnitTypeList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnitTypeList>, I>>(object: I): UnitTypeList {
    const message = createBaseUnitTypeList();
    message.unitTypes = object.unitTypes?.map((e) => UnitType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUnitType(): UnitType {
  return { type: 0, name: "", description: "", icon: "", health: 0, accuracy: 0, sightRange: 0, movementSpeed: 0 };
}

export const UnitType: MessageFns<UnitType> = {
  encode(message: UnitType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.icon !== "") {
      writer.uint32(34).string(message.icon);
    }
    if (message.health !== 0) {
      writer.uint32(40).uint32(message.health);
    }
    if (message.accuracy !== 0) {
      writer.uint32(53).float(message.accuracy);
    }
    if (message.sightRange !== 0) {
      writer.uint32(61).float(message.sightRange);
    }
    if (message.movementSpeed !== 0) {
      writer.uint32(69).float(message.movementSpeed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnitType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnitType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.health = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.accuracy = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.sightRange = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.movementSpeed = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnitType {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      health: isSet(object.health) ? globalThis.Number(object.health) : 0,
      accuracy: isSet(object.accuracy) ? globalThis.Number(object.accuracy) : 0,
      sightRange: isSet(object.sightRange) ? globalThis.Number(object.sightRange) : 0,
      movementSpeed: isSet(object.movementSpeed) ? globalThis.Number(object.movementSpeed) : 0,
    };
  },

  toJSON(message: UnitType): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.health !== 0) {
      obj.health = Math.round(message.health);
    }
    if (message.accuracy !== 0) {
      obj.accuracy = message.accuracy;
    }
    if (message.sightRange !== 0) {
      obj.sightRange = message.sightRange;
    }
    if (message.movementSpeed !== 0) {
      obj.movementSpeed = message.movementSpeed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnitType>, I>>(base?: I): UnitType {
    return UnitType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnitType>, I>>(object: I): UnitType {
    const message = createBaseUnitType();
    message.type = object.type ?? 0;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.icon = object.icon ?? "";
    message.health = object.health ?? 0;
    message.accuracy = object.accuracy ?? 0;
    message.sightRange = object.sightRange ?? 0;
    message.movementSpeed = object.movementSpeed ?? 0;
    return message;
  },
};

function createBaseAreaList(): AreaList {
  return { areas: [] };
}

export const AreaList: MessageFns<AreaList> = {
  encode(message: AreaList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.areas) {
      Area.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AreaList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAreaList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.areas.push(Area.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AreaList {
    return { areas: globalThis.Array.isArray(object?.areas) ? object.areas.map((e: any) => Area.fromJSON(e)) : [] };
  },

  toJSON(message: AreaList): unknown {
    const obj: any = {};
    if (message.areas?.length) {
      obj.areas = message.areas.map((e) => Area.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AreaList>, I>>(base?: I): AreaList {
    return AreaList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AreaList>, I>>(object: I): AreaList {
    const message = createBaseAreaList();
    message.areas = object.areas?.map((e) => Area.fromPartial(e)) || [];
    return message;
  },
};

function createBaseArea(): Area {
  return { name: "", description: "", color: "", movementSpeedModifier: 0, accuracyModifier: 0, enemyMissChance: 0 };
}

export const Area: MessageFns<Area> = {
  encode(message: Area, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.color !== "") {
      writer.uint32(26).string(message.color);
    }
    if (message.movementSpeedModifier !== 0) {
      writer.uint32(37).float(message.movementSpeedModifier);
    }
    if (message.accuracyModifier !== 0) {
      writer.uint32(45).float(message.accuracyModifier);
    }
    if (message.enemyMissChance !== 0) {
      writer.uint32(53).float(message.enemyMissChance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Area {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.movementSpeedModifier = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.accuracyModifier = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.enemyMissChance = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Area {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      movementSpeedModifier: isSet(object.movementSpeedModifier) ? globalThis.Number(object.movementSpeedModifier) : 0,
      accuracyModifier: isSet(object.accuracyModifier) ? globalThis.Number(object.accuracyModifier) : 0,
      enemyMissChance: isSet(object.enemyMissChance) ? globalThis.Number(object.enemyMissChance) : 0,
    };
  },

  toJSON(message: Area): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.movementSpeedModifier !== 0) {
      obj.movementSpeedModifier = message.movementSpeedModifier;
    }
    if (message.accuracyModifier !== 0) {
      obj.accuracyModifier = message.accuracyModifier;
    }
    if (message.enemyMissChance !== 0) {
      obj.enemyMissChance = message.enemyMissChance;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Area>, I>>(base?: I): Area {
    return Area.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Area>, I>>(object: I): Area {
    const message = createBaseArea();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.color = object.color ?? "";
    message.movementSpeedModifier = object.movementSpeedModifier ?? 0;
    message.accuracyModifier = object.accuracyModifier ?? 0;
    message.enemyMissChance = object.enemyMissChance ?? 0;
    return message;
  },
};

function createBaseScenario(): Scenario {
  return { name: "", objectives: [], units: [], areas: [] };
}

export const Scenario: MessageFns<Scenario> = {
  encode(message: Scenario, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.objectives) {
      Objective.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.units) {
      Unit.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.areas) {
      ScenarioArea.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Scenario {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScenario();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.objectives.push(Objective.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.units.push(Unit.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.areas.push(ScenarioArea.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Scenario {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      objectives: globalThis.Array.isArray(object?.objectives)
        ? object.objectives.map((e: any) => Objective.fromJSON(e))
        : [],
      units: globalThis.Array.isArray(object?.units) ? object.units.map((e: any) => Unit.fromJSON(e)) : [],
      areas: globalThis.Array.isArray(object?.areas) ? object.areas.map((e: any) => ScenarioArea.fromJSON(e)) : [],
    };
  },

  toJSON(message: Scenario): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.objectives?.length) {
      obj.objectives = message.objectives.map((e) => Objective.toJSON(e));
    }
    if (message.units?.length) {
      obj.units = message.units.map((e) => Unit.toJSON(e));
    }
    if (message.areas?.length) {
      obj.areas = message.areas.map((e) => ScenarioArea.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Scenario>, I>>(base?: I): Scenario {
    return Scenario.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Scenario>, I>>(object: I): Scenario {
    const message = createBaseScenario();
    message.name = object.name ?? "";
    message.objectives = object.objectives?.map((e) => Objective.fromPartial(e)) || [];
    message.units = object.units?.map((e) => Unit.fromPartial(e)) || [];
    message.areas = object.areas?.map((e) => ScenarioArea.fromPartial(e)) || [];
    return message;
  },
};

function createBaseObjective(): Objective {
  return { letter: "", state: 0, position: undefined };
}

export const Objective: MessageFns<Objective> = {
  encode(message: Objective, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.letter !== "") {
      writer.uint32(10).string(message.letter);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Objective {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjective();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.letter = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.position = Position.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Objective {
    return {
      letter: isSet(object.letter) ? globalThis.String(object.letter) : "",
      state: isSet(object.state) ? objectiveStateFromJSON(object.state) : 0,
      position: isSet(object.position) ? Position.fromJSON(object.position) : undefined,
    };
  },

  toJSON(message: Objective): unknown {
    const obj: any = {};
    if (message.letter !== "") {
      obj.letter = message.letter;
    }
    if (message.state !== 0) {
      obj.state = objectiveStateToJSON(message.state);
    }
    if (message.position !== undefined) {
      obj.position = Position.toJSON(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Objective>, I>>(base?: I): Objective {
    return Objective.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Objective>, I>>(object: I): Objective {
    const message = createBaseObjective();
    message.letter = object.letter ?? "";
    message.state = object.state ?? 0;
    message.position = (object.position !== undefined && object.position !== null)
      ? Position.fromPartial(object.position)
      : undefined;
    return message;
  },
};

function createBaseUnit(): Unit {
  return { position: undefined, unitKey: "", side: 0, icon: "" };
}

export const Unit: MessageFns<Unit> = {
  encode(message: Unit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(10).fork()).join();
    }
    if (message.unitKey !== "") {
      writer.uint32(18).string(message.unitKey);
    }
    if (message.side !== 0) {
      writer.uint32(24).int32(message.side);
    }
    if (message.icon !== "") {
      writer.uint32(34).string(message.icon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Unit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.position = Position.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.unitKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.side = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Unit {
    return {
      position: isSet(object.position) ? Position.fromJSON(object.position) : undefined,
      unitKey: isSet(object.unitKey) ? globalThis.String(object.unitKey) : "",
      side: isSet(object.side) ? unitSideFromJSON(object.side) : 0,
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
    };
  },

  toJSON(message: Unit): unknown {
    const obj: any = {};
    if (message.position !== undefined) {
      obj.position = Position.toJSON(message.position);
    }
    if (message.unitKey !== "") {
      obj.unitKey = message.unitKey;
    }
    if (message.side !== 0) {
      obj.side = unitSideToJSON(message.side);
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Unit>, I>>(base?: I): Unit {
    return Unit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Unit>, I>>(object: I): Unit {
    const message = createBaseUnit();
    message.position = (object.position !== undefined && object.position !== null)
      ? Position.fromPartial(object.position)
      : undefined;
    message.unitKey = object.unitKey ?? "";
    message.side = object.side ?? 0;
    message.icon = object.icon ?? "";
    return message;
  },
};

function createBaseScenarioArea(): ScenarioArea {
  return { type: "", coordinates: [] };
}

export const ScenarioArea: MessageFns<ScenarioArea> = {
  encode(message: ScenarioArea, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    for (const v of message.coordinates) {
      Ring.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScenarioArea {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScenarioArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.coordinates.push(Ring.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScenarioArea {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      coordinates: globalThis.Array.isArray(object?.coordinates)
        ? object.coordinates.map((e: any) => Ring.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ScenarioArea): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.coordinates?.length) {
      obj.coordinates = message.coordinates.map((e) => Ring.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScenarioArea>, I>>(base?: I): ScenarioArea {
    return ScenarioArea.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScenarioArea>, I>>(object: I): ScenarioArea {
    const message = createBaseScenarioArea();
    message.type = object.type ?? "";
    message.coordinates = object.coordinates?.map((e) => Ring.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRing(): Ring {
  return { points: [] };
}

export const Ring: MessageFns<Ring> = {
  encode(message: Ring, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      Position.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ring {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.points.push(Position.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ring {
    return {
      points: globalThis.Array.isArray(object?.points) ? object.points.map((e: any) => Position.fromJSON(e)) : [],
    };
  },

  toJSON(message: Ring): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => Position.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ring>, I>>(base?: I): Ring {
    return Ring.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ring>, I>>(object: I): Ring {
    const message = createBaseRing();
    message.points = object.points?.map((e) => Position.fromPartial(e)) || [];
    return message;
  },
};

function createBasePosition(): Position {
  return { lon: 0, lat: 0 };
}

export const Position: MessageFns<Position> = {
  encode(message: Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lon !== 0) {
      writer.uint32(9).double(message.lon);
    }
    if (message.lat !== 0) {
      writer.uint32(17).double(message.lat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.lon = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.lat = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      lon: isSet(object.lon) ? globalThis.Number(object.lon) : 0,
      lat: isSet(object.lat) ? globalThis.Number(object.lat) : 0,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.lon !== 0) {
      obj.lon = message.lon;
    }
    if (message.lat !== 0) {
      obj.lat = message.lat;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Position>, I>>(base?: I): Position {
    return Position.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Position>, I>>(object: I): Position {
    const message = createBasePosition();
    message.lon = object.lon ?? 0;
    message.lat = object.lat ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
