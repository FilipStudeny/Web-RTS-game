// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: game_session.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "game_session";

/** Request to start a session */
export interface StartSessionRequest {
  userId: string;
  scenarioId: string;
}

/** Response after starting a session */
export interface StartSessionResponse {
  sessionId: string;
}

/** Request to join an existing session */
export interface JoinSessionRequest {
  userId: string;
  sessionId: string;
}

/** Response after joining a session */
export interface JoinSessionResponse {
}

/** A single session summary */
export interface SessionSummary {
  sessionId: string;
  scenarioId: string;
  state: string;
  player1: string;
  player2: string;
  scenarioName: string;
}

/** List of sessions */
export interface SessionList {
  sessions: SessionSummary[];
}

/** Message sent when a session becomes ready (player2 joined) */
export interface SessionReadyEvent {
  sessionId: string;
  player2: string;
}

/** WebSocket envelope for incoming client -> server messages (optional) */
export interface WsClientMessage {
  ping?: string | undefined;
  moveUnit?: MoveUnitRequest | undefined;
}

/** Sent when the creator starts the game */
export interface GameStartedEvent {
  sessionId: string;
}

export interface GameEndedEvent {
  sessionId: string;
  winnerId: string;
  /** e.g., "Opponent disconnected" */
  reason: string;
}

export interface WsServerMessage {
  sessionReady?: SessionReadyEvent | undefined;
  gameStarted?: GameStartedEvent | undefined;
  gameEnded?: GameEndedEvent | undefined;
  unitMoved?: MoveUnitBroadcast | undefined;
}

export interface MoveUnitRequest {
  sessionId: string;
  unitId: string;
  targetLat: number;
  targetLon: number;
}

export interface MoveUnitBroadcast {
  sessionId: string;
  unitId: string;
  targetLat: number;
  targetLon: number;
}

function createBaseStartSessionRequest(): StartSessionRequest {
  return { userId: "", scenarioId: "" };
}

export const StartSessionRequest: MessageFns<StartSessionRequest> = {
  encode(message: StartSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.scenarioId !== "") {
      writer.uint32(18).string(message.scenarioId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.scenarioId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartSessionRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      scenarioId: isSet(object.scenarioId) ? globalThis.String(object.scenarioId) : "",
    };
  },

  toJSON(message: StartSessionRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.scenarioId !== "") {
      obj.scenarioId = message.scenarioId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartSessionRequest>, I>>(base?: I): StartSessionRequest {
    return StartSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartSessionRequest>, I>>(object: I): StartSessionRequest {
    const message = createBaseStartSessionRequest();
    message.userId = object.userId ?? "";
    message.scenarioId = object.scenarioId ?? "";
    return message;
  },
};

function createBaseStartSessionResponse(): StartSessionResponse {
  return { sessionId: "" };
}

export const StartSessionResponse: MessageFns<StartSessionResponse> = {
  encode(message: StartSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartSessionResponse {
    return { sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "" };
  },

  toJSON(message: StartSessionResponse): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartSessionResponse>, I>>(base?: I): StartSessionResponse {
    return StartSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartSessionResponse>, I>>(object: I): StartSessionResponse {
    const message = createBaseStartSessionResponse();
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

function createBaseJoinSessionRequest(): JoinSessionRequest {
  return { userId: "", sessionId: "" };
}

export const JoinSessionRequest: MessageFns<JoinSessionRequest> = {
  encode(message: JoinSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.sessionId !== "") {
      writer.uint32(18).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinSessionRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
    };
  },

  toJSON(message: JoinSessionRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinSessionRequest>, I>>(base?: I): JoinSessionRequest {
    return JoinSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinSessionRequest>, I>>(object: I): JoinSessionRequest {
    const message = createBaseJoinSessionRequest();
    message.userId = object.userId ?? "";
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

function createBaseJoinSessionResponse(): JoinSessionResponse {
  return {};
}

export const JoinSessionResponse: MessageFns<JoinSessionResponse> = {
  encode(_: JoinSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): JoinSessionResponse {
    return {};
  },

  toJSON(_: JoinSessionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinSessionResponse>, I>>(base?: I): JoinSessionResponse {
    return JoinSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinSessionResponse>, I>>(_: I): JoinSessionResponse {
    const message = createBaseJoinSessionResponse();
    return message;
  },
};

function createBaseSessionSummary(): SessionSummary {
  return { sessionId: "", scenarioId: "", state: "", player1: "", player2: "", scenarioName: "" };
}

export const SessionSummary: MessageFns<SessionSummary> = {
  encode(message: SessionSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.scenarioId !== "") {
      writer.uint32(18).string(message.scenarioId);
    }
    if (message.state !== "") {
      writer.uint32(26).string(message.state);
    }
    if (message.player1 !== "") {
      writer.uint32(34).string(message.player1);
    }
    if (message.player2 !== "") {
      writer.uint32(42).string(message.player2);
    }
    if (message.scenarioName !== "") {
      writer.uint32(50).string(message.scenarioName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.scenarioId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.state = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.player1 = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.player2 = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.scenarioName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionSummary {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      scenarioId: isSet(object.scenarioId) ? globalThis.String(object.scenarioId) : "",
      state: isSet(object.state) ? globalThis.String(object.state) : "",
      player1: isSet(object.player1) ? globalThis.String(object.player1) : "",
      player2: isSet(object.player2) ? globalThis.String(object.player2) : "",
      scenarioName: isSet(object.scenarioName) ? globalThis.String(object.scenarioName) : "",
    };
  },

  toJSON(message: SessionSummary): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.scenarioId !== "") {
      obj.scenarioId = message.scenarioId;
    }
    if (message.state !== "") {
      obj.state = message.state;
    }
    if (message.player1 !== "") {
      obj.player1 = message.player1;
    }
    if (message.player2 !== "") {
      obj.player2 = message.player2;
    }
    if (message.scenarioName !== "") {
      obj.scenarioName = message.scenarioName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionSummary>, I>>(base?: I): SessionSummary {
    return SessionSummary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionSummary>, I>>(object: I): SessionSummary {
    const message = createBaseSessionSummary();
    message.sessionId = object.sessionId ?? "";
    message.scenarioId = object.scenarioId ?? "";
    message.state = object.state ?? "";
    message.player1 = object.player1 ?? "";
    message.player2 = object.player2 ?? "";
    message.scenarioName = object.scenarioName ?? "";
    return message;
  },
};

function createBaseSessionList(): SessionList {
  return { sessions: [] };
}

export const SessionList: MessageFns<SessionList> = {
  encode(message: SessionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sessions) {
      SessionSummary.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessions.push(SessionSummary.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionList {
    return {
      sessions: globalThis.Array.isArray(object?.sessions)
        ? object.sessions.map((e: any) => SessionSummary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SessionList): unknown {
    const obj: any = {};
    if (message.sessions?.length) {
      obj.sessions = message.sessions.map((e) => SessionSummary.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionList>, I>>(base?: I): SessionList {
    return SessionList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionList>, I>>(object: I): SessionList {
    const message = createBaseSessionList();
    message.sessions = object.sessions?.map((e) => SessionSummary.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSessionReadyEvent(): SessionReadyEvent {
  return { sessionId: "", player2: "" };
}

export const SessionReadyEvent: MessageFns<SessionReadyEvent> = {
  encode(message: SessionReadyEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.player2 !== "") {
      writer.uint32(18).string(message.player2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionReadyEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionReadyEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.player2 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionReadyEvent {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      player2: isSet(object.player2) ? globalThis.String(object.player2) : "",
    };
  },

  toJSON(message: SessionReadyEvent): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.player2 !== "") {
      obj.player2 = message.player2;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionReadyEvent>, I>>(base?: I): SessionReadyEvent {
    return SessionReadyEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionReadyEvent>, I>>(object: I): SessionReadyEvent {
    const message = createBaseSessionReadyEvent();
    message.sessionId = object.sessionId ?? "";
    message.player2 = object.player2 ?? "";
    return message;
  },
};

function createBaseWsClientMessage(): WsClientMessage {
  return { ping: undefined, moveUnit: undefined };
}

export const WsClientMessage: MessageFns<WsClientMessage> = {
  encode(message: WsClientMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ping !== undefined) {
      writer.uint32(10).string(message.ping);
    }
    if (message.moveUnit !== undefined) {
      MoveUnitRequest.encode(message.moveUnit, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WsClientMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWsClientMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ping = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.moveUnit = MoveUnitRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WsClientMessage {
    return {
      ping: isSet(object.ping) ? globalThis.String(object.ping) : undefined,
      moveUnit: isSet(object.moveUnit) ? MoveUnitRequest.fromJSON(object.moveUnit) : undefined,
    };
  },

  toJSON(message: WsClientMessage): unknown {
    const obj: any = {};
    if (message.ping !== undefined) {
      obj.ping = message.ping;
    }
    if (message.moveUnit !== undefined) {
      obj.moveUnit = MoveUnitRequest.toJSON(message.moveUnit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WsClientMessage>, I>>(base?: I): WsClientMessage {
    return WsClientMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WsClientMessage>, I>>(object: I): WsClientMessage {
    const message = createBaseWsClientMessage();
    message.ping = object.ping ?? undefined;
    message.moveUnit = (object.moveUnit !== undefined && object.moveUnit !== null)
      ? MoveUnitRequest.fromPartial(object.moveUnit)
      : undefined;
    return message;
  },
};

function createBaseGameStartedEvent(): GameStartedEvent {
  return { sessionId: "" };
}

export const GameStartedEvent: MessageFns<GameStartedEvent> = {
  encode(message: GameStartedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameStartedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameStartedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameStartedEvent {
    return { sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "" };
  },

  toJSON(message: GameStartedEvent): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameStartedEvent>, I>>(base?: I): GameStartedEvent {
    return GameStartedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameStartedEvent>, I>>(object: I): GameStartedEvent {
    const message = createBaseGameStartedEvent();
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

function createBaseGameEndedEvent(): GameEndedEvent {
  return { sessionId: "", winnerId: "", reason: "" };
}

export const GameEndedEvent: MessageFns<GameEndedEvent> = {
  encode(message: GameEndedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.winnerId !== "") {
      writer.uint32(18).string(message.winnerId);
    }
    if (message.reason !== "") {
      writer.uint32(26).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameEndedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameEndedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.winnerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameEndedEvent {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      winnerId: isSet(object.winnerId) ? globalThis.String(object.winnerId) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: GameEndedEvent): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.winnerId !== "") {
      obj.winnerId = message.winnerId;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameEndedEvent>, I>>(base?: I): GameEndedEvent {
    return GameEndedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameEndedEvent>, I>>(object: I): GameEndedEvent {
    const message = createBaseGameEndedEvent();
    message.sessionId = object.sessionId ?? "";
    message.winnerId = object.winnerId ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseWsServerMessage(): WsServerMessage {
  return { sessionReady: undefined, gameStarted: undefined, gameEnded: undefined, unitMoved: undefined };
}

export const WsServerMessage: MessageFns<WsServerMessage> = {
  encode(message: WsServerMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionReady !== undefined) {
      SessionReadyEvent.encode(message.sessionReady, writer.uint32(10).fork()).join();
    }
    if (message.gameStarted !== undefined) {
      GameStartedEvent.encode(message.gameStarted, writer.uint32(18).fork()).join();
    }
    if (message.gameEnded !== undefined) {
      GameEndedEvent.encode(message.gameEnded, writer.uint32(26).fork()).join();
    }
    if (message.unitMoved !== undefined) {
      MoveUnitBroadcast.encode(message.unitMoved, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WsServerMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWsServerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionReady = SessionReadyEvent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameStarted = GameStartedEvent.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gameEnded = GameEndedEvent.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.unitMoved = MoveUnitBroadcast.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WsServerMessage {
    return {
      sessionReady: isSet(object.sessionReady) ? SessionReadyEvent.fromJSON(object.sessionReady) : undefined,
      gameStarted: isSet(object.gameStarted) ? GameStartedEvent.fromJSON(object.gameStarted) : undefined,
      gameEnded: isSet(object.gameEnded) ? GameEndedEvent.fromJSON(object.gameEnded) : undefined,
      unitMoved: isSet(object.unitMoved) ? MoveUnitBroadcast.fromJSON(object.unitMoved) : undefined,
    };
  },

  toJSON(message: WsServerMessage): unknown {
    const obj: any = {};
    if (message.sessionReady !== undefined) {
      obj.sessionReady = SessionReadyEvent.toJSON(message.sessionReady);
    }
    if (message.gameStarted !== undefined) {
      obj.gameStarted = GameStartedEvent.toJSON(message.gameStarted);
    }
    if (message.gameEnded !== undefined) {
      obj.gameEnded = GameEndedEvent.toJSON(message.gameEnded);
    }
    if (message.unitMoved !== undefined) {
      obj.unitMoved = MoveUnitBroadcast.toJSON(message.unitMoved);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WsServerMessage>, I>>(base?: I): WsServerMessage {
    return WsServerMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WsServerMessage>, I>>(object: I): WsServerMessage {
    const message = createBaseWsServerMessage();
    message.sessionReady = (object.sessionReady !== undefined && object.sessionReady !== null)
      ? SessionReadyEvent.fromPartial(object.sessionReady)
      : undefined;
    message.gameStarted = (object.gameStarted !== undefined && object.gameStarted !== null)
      ? GameStartedEvent.fromPartial(object.gameStarted)
      : undefined;
    message.gameEnded = (object.gameEnded !== undefined && object.gameEnded !== null)
      ? GameEndedEvent.fromPartial(object.gameEnded)
      : undefined;
    message.unitMoved = (object.unitMoved !== undefined && object.unitMoved !== null)
      ? MoveUnitBroadcast.fromPartial(object.unitMoved)
      : undefined;
    return message;
  },
};

function createBaseMoveUnitRequest(): MoveUnitRequest {
  return { sessionId: "", unitId: "", targetLat: 0, targetLon: 0 };
}

export const MoveUnitRequest: MessageFns<MoveUnitRequest> = {
  encode(message: MoveUnitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.unitId !== "") {
      writer.uint32(18).string(message.unitId);
    }
    if (message.targetLat !== 0) {
      writer.uint32(25).double(message.targetLat);
    }
    if (message.targetLon !== 0) {
      writer.uint32(33).double(message.targetLon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoveUnitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoveUnitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.unitId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.targetLat = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.targetLon = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoveUnitRequest {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      unitId: isSet(object.unitId) ? globalThis.String(object.unitId) : "",
      targetLat: isSet(object.targetLat) ? globalThis.Number(object.targetLat) : 0,
      targetLon: isSet(object.targetLon) ? globalThis.Number(object.targetLon) : 0,
    };
  },

  toJSON(message: MoveUnitRequest): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.unitId !== "") {
      obj.unitId = message.unitId;
    }
    if (message.targetLat !== 0) {
      obj.targetLat = message.targetLat;
    }
    if (message.targetLon !== 0) {
      obj.targetLon = message.targetLon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MoveUnitRequest>, I>>(base?: I): MoveUnitRequest {
    return MoveUnitRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MoveUnitRequest>, I>>(object: I): MoveUnitRequest {
    const message = createBaseMoveUnitRequest();
    message.sessionId = object.sessionId ?? "";
    message.unitId = object.unitId ?? "";
    message.targetLat = object.targetLat ?? 0;
    message.targetLon = object.targetLon ?? 0;
    return message;
  },
};

function createBaseMoveUnitBroadcast(): MoveUnitBroadcast {
  return { sessionId: "", unitId: "", targetLat: 0, targetLon: 0 };
}

export const MoveUnitBroadcast: MessageFns<MoveUnitBroadcast> = {
  encode(message: MoveUnitBroadcast, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.unitId !== "") {
      writer.uint32(18).string(message.unitId);
    }
    if (message.targetLat !== 0) {
      writer.uint32(25).double(message.targetLat);
    }
    if (message.targetLon !== 0) {
      writer.uint32(33).double(message.targetLon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoveUnitBroadcast {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoveUnitBroadcast();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.unitId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.targetLat = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.targetLon = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoveUnitBroadcast {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      unitId: isSet(object.unitId) ? globalThis.String(object.unitId) : "",
      targetLat: isSet(object.targetLat) ? globalThis.Number(object.targetLat) : 0,
      targetLon: isSet(object.targetLon) ? globalThis.Number(object.targetLon) : 0,
    };
  },

  toJSON(message: MoveUnitBroadcast): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.unitId !== "") {
      obj.unitId = message.unitId;
    }
    if (message.targetLat !== 0) {
      obj.targetLat = message.targetLat;
    }
    if (message.targetLon !== 0) {
      obj.targetLon = message.targetLon;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MoveUnitBroadcast>, I>>(base?: I): MoveUnitBroadcast {
    return MoveUnitBroadcast.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MoveUnitBroadcast>, I>>(object: I): MoveUnitBroadcast {
    const message = createBaseMoveUnitBroadcast();
    message.sessionId = object.sessionId ?? "";
    message.unitId = object.unitId ?? "";
    message.targetLat = object.targetLat ?? 0;
    message.targetLon = object.targetLon ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
