// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: game_session.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "game_session";

/** Request to start a session */
export interface StartSessionRequest {
  userId: string;
  scenarioId: string;
}

/** Response after starting a session */
export interface StartSessionResponse {
  sessionId: string;
}

/** Request to join an existing session */
export interface JoinSessionRequest {
  userId: string;
  sessionId: string;
}

/** Response after joining a session */
export interface JoinSessionResponse {
}

/** A single session summary */
export interface SessionSummary {
  sessionId: string;
  scenarioId: string;
  state: string;
  player1: string;
  player2: string;
}

/** List of sessions */
export interface SessionList {
  sessions: SessionSummary[];
}

function createBaseStartSessionRequest(): StartSessionRequest {
  return { userId: "", scenarioId: "" };
}

export const StartSessionRequest: MessageFns<StartSessionRequest> = {
  encode(message: StartSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.scenarioId !== "") {
      writer.uint32(18).string(message.scenarioId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.scenarioId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartSessionRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      scenarioId: isSet(object.scenarioId) ? globalThis.String(object.scenarioId) : "",
    };
  },

  toJSON(message: StartSessionRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.scenarioId !== "") {
      obj.scenarioId = message.scenarioId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartSessionRequest>, I>>(base?: I): StartSessionRequest {
    return StartSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartSessionRequest>, I>>(object: I): StartSessionRequest {
    const message = createBaseStartSessionRequest();
    message.userId = object.userId ?? "";
    message.scenarioId = object.scenarioId ?? "";
    return message;
  },
};

function createBaseStartSessionResponse(): StartSessionResponse {
  return { sessionId: "" };
}

export const StartSessionResponse: MessageFns<StartSessionResponse> = {
  encode(message: StartSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartSessionResponse {
    return { sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "" };
  },

  toJSON(message: StartSessionResponse): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartSessionResponse>, I>>(base?: I): StartSessionResponse {
    return StartSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartSessionResponse>, I>>(object: I): StartSessionResponse {
    const message = createBaseStartSessionResponse();
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

function createBaseJoinSessionRequest(): JoinSessionRequest {
  return { userId: "", sessionId: "" };
}

export const JoinSessionRequest: MessageFns<JoinSessionRequest> = {
  encode(message: JoinSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.sessionId !== "") {
      writer.uint32(18).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinSessionRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
    };
  },

  toJSON(message: JoinSessionRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinSessionRequest>, I>>(base?: I): JoinSessionRequest {
    return JoinSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinSessionRequest>, I>>(object: I): JoinSessionRequest {
    const message = createBaseJoinSessionRequest();
    message.userId = object.userId ?? "";
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

function createBaseJoinSessionResponse(): JoinSessionResponse {
  return {};
}

export const JoinSessionResponse: MessageFns<JoinSessionResponse> = {
  encode(_: JoinSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): JoinSessionResponse {
    return {};
  },

  toJSON(_: JoinSessionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinSessionResponse>, I>>(base?: I): JoinSessionResponse {
    return JoinSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinSessionResponse>, I>>(_: I): JoinSessionResponse {
    const message = createBaseJoinSessionResponse();
    return message;
  },
};

function createBaseSessionSummary(): SessionSummary {
  return { sessionId: "", scenarioId: "", state: "", player1: "", player2: "" };
}

export const SessionSummary: MessageFns<SessionSummary> = {
  encode(message: SessionSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.scenarioId !== "") {
      writer.uint32(18).string(message.scenarioId);
    }
    if (message.state !== "") {
      writer.uint32(26).string(message.state);
    }
    if (message.player1 !== "") {
      writer.uint32(34).string(message.player1);
    }
    if (message.player2 !== "") {
      writer.uint32(42).string(message.player2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.scenarioId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.state = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.player1 = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.player2 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionSummary {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      scenarioId: isSet(object.scenarioId) ? globalThis.String(object.scenarioId) : "",
      state: isSet(object.state) ? globalThis.String(object.state) : "",
      player1: isSet(object.player1) ? globalThis.String(object.player1) : "",
      player2: isSet(object.player2) ? globalThis.String(object.player2) : "",
    };
  },

  toJSON(message: SessionSummary): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.scenarioId !== "") {
      obj.scenarioId = message.scenarioId;
    }
    if (message.state !== "") {
      obj.state = message.state;
    }
    if (message.player1 !== "") {
      obj.player1 = message.player1;
    }
    if (message.player2 !== "") {
      obj.player2 = message.player2;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionSummary>, I>>(base?: I): SessionSummary {
    return SessionSummary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionSummary>, I>>(object: I): SessionSummary {
    const message = createBaseSessionSummary();
    message.sessionId = object.sessionId ?? "";
    message.scenarioId = object.scenarioId ?? "";
    message.state = object.state ?? "";
    message.player1 = object.player1 ?? "";
    message.player2 = object.player2 ?? "";
    return message;
  },
};

function createBaseSessionList(): SessionList {
  return { sessions: [] };
}

export const SessionList: MessageFns<SessionList> = {
  encode(message: SessionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sessions) {
      SessionSummary.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessions.push(SessionSummary.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionList {
    return {
      sessions: globalThis.Array.isArray(object?.sessions)
        ? object.sessions.map((e: any) => SessionSummary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SessionList): unknown {
    const obj: any = {};
    if (message.sessions?.length) {
      obj.sessions = message.sessions.map((e) => SessionSummary.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionList>, I>>(base?: I): SessionList {
    return SessionList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionList>, I>>(object: I): SessionList {
    const message = createBaseSessionList();
    message.sessions = object.sessions?.map((e) => SessionSummary.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
