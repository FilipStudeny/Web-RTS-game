// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: summary_scenario.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "scenario_summary";

export interface ScenarioSummary {
  id: string;
  name: string;
}

export interface ScenarioList {
  scenarios: ScenarioSummary[];
}

function createBaseScenarioSummary(): ScenarioSummary {
  return { id: "", name: "" };
}

export const ScenarioSummary: MessageFns<ScenarioSummary> = {
  encode(message: ScenarioSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScenarioSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScenarioSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScenarioSummary {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: ScenarioSummary): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScenarioSummary>, I>>(base?: I): ScenarioSummary {
    return ScenarioSummary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScenarioSummary>, I>>(object: I): ScenarioSummary {
    const message = createBaseScenarioSummary();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseScenarioList(): ScenarioList {
  return { scenarios: [] };
}

export const ScenarioList: MessageFns<ScenarioList> = {
  encode(message: ScenarioList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.scenarios) {
      ScenarioSummary.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScenarioList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScenarioList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scenarios.push(ScenarioSummary.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScenarioList {
    return {
      scenarios: globalThis.Array.isArray(object?.scenarios)
        ? object.scenarios.map((e: any) => ScenarioSummary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ScenarioList): unknown {
    const obj: any = {};
    if (message.scenarios?.length) {
      obj.scenarios = message.scenarios.map((e) => ScenarioSummary.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScenarioList>, I>>(base?: I): ScenarioList {
    return ScenarioList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScenarioList>, I>>(object: I): ScenarioList {
    const message = createBaseScenarioList();
    message.scenarios = object.scenarios?.map((e) => ScenarioSummary.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
