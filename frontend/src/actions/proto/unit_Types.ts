// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: unit_types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "models";

export enum UnitTypeKey {
  UNIT_TYPE_UNSPECIFIED = 0,
  INFANTRY = 1,
  LIGHT_INFANTRY = 2,
  MECHANIZED_INFANTRY = 3,
  MOTORIZED_INFANTRY = 4,
  SPECIAL_OPERATION_FORCES = 5,
  ENGINEERS = 6,
  ARTILLERY = 7,
  MORTARS = 8,
  ANTI_TANK = 9,
  HEADQUATERS_UNIT = 10,
  LIGHT_ARMOUR = 11,
  WHEELED_ARMOUR = 12,
  MEDIUM_ARMOUR = 13,
  HEAVY_ARMOUR = 14,
  ARMOUR = 15,
  UNRECOGNIZED = -1,
}

export function unitTypeKeyFromJSON(object: any): UnitTypeKey {
  switch (object) {
    case 0:
    case "UNIT_TYPE_UNSPECIFIED":
      return UnitTypeKey.UNIT_TYPE_UNSPECIFIED;
    case 1:
    case "INFANTRY":
      return UnitTypeKey.INFANTRY;
    case 2:
    case "LIGHT_INFANTRY":
      return UnitTypeKey.LIGHT_INFANTRY;
    case 3:
    case "MECHANIZED_INFANTRY":
      return UnitTypeKey.MECHANIZED_INFANTRY;
    case 4:
    case "MOTORIZED_INFANTRY":
      return UnitTypeKey.MOTORIZED_INFANTRY;
    case 5:
    case "SPECIAL_OPERATION_FORCES":
      return UnitTypeKey.SPECIAL_OPERATION_FORCES;
    case 6:
    case "ENGINEERS":
      return UnitTypeKey.ENGINEERS;
    case 7:
    case "ARTILLERY":
      return UnitTypeKey.ARTILLERY;
    case 8:
    case "MORTARS":
      return UnitTypeKey.MORTARS;
    case 9:
    case "ANTI_TANK":
      return UnitTypeKey.ANTI_TANK;
    case 10:
    case "HEADQUATERS_UNIT":
      return UnitTypeKey.HEADQUATERS_UNIT;
    case 11:
    case "LIGHT_ARMOUR":
      return UnitTypeKey.LIGHT_ARMOUR;
    case 12:
    case "WHEELED_ARMOUR":
      return UnitTypeKey.WHEELED_ARMOUR;
    case 13:
    case "MEDIUM_ARMOUR":
      return UnitTypeKey.MEDIUM_ARMOUR;
    case 14:
    case "HEAVY_ARMOUR":
      return UnitTypeKey.HEAVY_ARMOUR;
    case 15:
    case "ARMOUR":
      return UnitTypeKey.ARMOUR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UnitTypeKey.UNRECOGNIZED;
  }
}

export function unitTypeKeyToJSON(object: UnitTypeKey): string {
  switch (object) {
    case UnitTypeKey.UNIT_TYPE_UNSPECIFIED:
      return "UNIT_TYPE_UNSPECIFIED";
    case UnitTypeKey.INFANTRY:
      return "INFANTRY";
    case UnitTypeKey.LIGHT_INFANTRY:
      return "LIGHT_INFANTRY";
    case UnitTypeKey.MECHANIZED_INFANTRY:
      return "MECHANIZED_INFANTRY";
    case UnitTypeKey.MOTORIZED_INFANTRY:
      return "MOTORIZED_INFANTRY";
    case UnitTypeKey.SPECIAL_OPERATION_FORCES:
      return "SPECIAL_OPERATION_FORCES";
    case UnitTypeKey.ENGINEERS:
      return "ENGINEERS";
    case UnitTypeKey.ARTILLERY:
      return "ARTILLERY";
    case UnitTypeKey.MORTARS:
      return "MORTARS";
    case UnitTypeKey.ANTI_TANK:
      return "ANTI_TANK";
    case UnitTypeKey.HEADQUATERS_UNIT:
      return "HEADQUATERS_UNIT";
    case UnitTypeKey.LIGHT_ARMOUR:
      return "LIGHT_ARMOUR";
    case UnitTypeKey.WHEELED_ARMOUR:
      return "WHEELED_ARMOUR";
    case UnitTypeKey.MEDIUM_ARMOUR:
      return "MEDIUM_ARMOUR";
    case UnitTypeKey.HEAVY_ARMOUR:
      return "HEAVY_ARMOUR";
    case UnitTypeKey.ARMOUR:
      return "ARMOUR";
    case UnitTypeKey.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UnitType {
  type: UnitTypeKey;
  name: string;
  description: string;
  icon: string;
  health: number;
  accuracy: number;
  sightRange: number;
  movementSpeed: number;
  damage: number;
}

export interface UnitTypeList {
  unitTypes: UnitType[];
}

function createBaseUnitType(): UnitType {
  return {
    type: 0,
    name: "",
    description: "",
    icon: "",
    health: 0,
    accuracy: 0,
    sightRange: 0,
    movementSpeed: 0,
    damage: 0,
  };
}

export const UnitType: MessageFns<UnitType> = {
  encode(message: UnitType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.icon !== "") {
      writer.uint32(34).string(message.icon);
    }
    if (message.health !== 0) {
      writer.uint32(40).uint32(message.health);
    }
    if (message.accuracy !== 0) {
      writer.uint32(53).float(message.accuracy);
    }
    if (message.sightRange !== 0) {
      writer.uint32(61).float(message.sightRange);
    }
    if (message.movementSpeed !== 0) {
      writer.uint32(69).float(message.movementSpeed);
    }
    if (message.damage !== 0) {
      writer.uint32(72).uint32(message.damage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnitType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnitType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.health = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.accuracy = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.sightRange = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.movementSpeed = reader.float();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.damage = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnitType {
    return {
      type: isSet(object.type) ? unitTypeKeyFromJSON(object.type) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      health: isSet(object.health) ? globalThis.Number(object.health) : 0,
      accuracy: isSet(object.accuracy) ? globalThis.Number(object.accuracy) : 0,
      sightRange: isSet(object.sightRange) ? globalThis.Number(object.sightRange) : 0,
      movementSpeed: isSet(object.movementSpeed) ? globalThis.Number(object.movementSpeed) : 0,
      damage: isSet(object.damage) ? globalThis.Number(object.damage) : 0,
    };
  },

  toJSON(message: UnitType): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = unitTypeKeyToJSON(message.type);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.health !== 0) {
      obj.health = Math.round(message.health);
    }
    if (message.accuracy !== 0) {
      obj.accuracy = message.accuracy;
    }
    if (message.sightRange !== 0) {
      obj.sightRange = message.sightRange;
    }
    if (message.movementSpeed !== 0) {
      obj.movementSpeed = message.movementSpeed;
    }
    if (message.damage !== 0) {
      obj.damage = Math.round(message.damage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnitType>, I>>(base?: I): UnitType {
    return UnitType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnitType>, I>>(object: I): UnitType {
    const message = createBaseUnitType();
    message.type = object.type ?? 0;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.icon = object.icon ?? "";
    message.health = object.health ?? 0;
    message.accuracy = object.accuracy ?? 0;
    message.sightRange = object.sightRange ?? 0;
    message.movementSpeed = object.movementSpeed ?? 0;
    message.damage = object.damage ?? 0;
    return message;
  },
};

function createBaseUnitTypeList(): UnitTypeList {
  return { unitTypes: [] };
}

export const UnitTypeList: MessageFns<UnitTypeList> = {
  encode(message: UnitTypeList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.unitTypes) {
      UnitType.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnitTypeList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnitTypeList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unitTypes.push(UnitType.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnitTypeList {
    return {
      unitTypes: globalThis.Array.isArray(object?.unitTypes)
        ? object.unitTypes.map((e: any) => UnitType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UnitTypeList): unknown {
    const obj: any = {};
    if (message.unitTypes?.length) {
      obj.unitTypes = message.unitTypes.map((e) => UnitType.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnitTypeList>, I>>(base?: I): UnitTypeList {
    return UnitTypeList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnitTypeList>, I>>(object: I): UnitTypeList {
    const message = createBaseUnitTypeList();
    message.unitTypes = object.unitTypes?.map((e) => UnitType.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
