// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: area_types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "area_models";

export interface Area {
  name: string;
  description: string;
  color: string;
  /** e.g., 0.8 means 80% speed */
  movementSpeedModifier: number;
  /** e.g., 1.1 means 110% accuracy */
  accuracyModifier: number;
  /** e.g., 0.2 means 20% chance to miss */
  enemyMissChance: number;
}

export interface AreaList {
  areas: Area[];
}

function createBaseArea(): Area {
  return { name: "", description: "", color: "", movementSpeedModifier: 0, accuracyModifier: 0, enemyMissChance: 0 };
}

export const Area: MessageFns<Area> = {
  encode(message: Area, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.color !== "") {
      writer.uint32(26).string(message.color);
    }
    if (message.movementSpeedModifier !== 0) {
      writer.uint32(37).float(message.movementSpeedModifier);
    }
    if (message.accuracyModifier !== 0) {
      writer.uint32(45).float(message.accuracyModifier);
    }
    if (message.enemyMissChance !== 0) {
      writer.uint32(53).float(message.enemyMissChance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Area {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.movementSpeedModifier = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.accuracyModifier = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.enemyMissChance = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Area {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      movementSpeedModifier: isSet(object.movementSpeedModifier) ? globalThis.Number(object.movementSpeedModifier) : 0,
      accuracyModifier: isSet(object.accuracyModifier) ? globalThis.Number(object.accuracyModifier) : 0,
      enemyMissChance: isSet(object.enemyMissChance) ? globalThis.Number(object.enemyMissChance) : 0,
    };
  },

  toJSON(message: Area): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.movementSpeedModifier !== 0) {
      obj.movementSpeedModifier = message.movementSpeedModifier;
    }
    if (message.accuracyModifier !== 0) {
      obj.accuracyModifier = message.accuracyModifier;
    }
    if (message.enemyMissChance !== 0) {
      obj.enemyMissChance = message.enemyMissChance;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Area>, I>>(base?: I): Area {
    return Area.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Area>, I>>(object: I): Area {
    const message = createBaseArea();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.color = object.color ?? "";
    message.movementSpeedModifier = object.movementSpeedModifier ?? 0;
    message.accuracyModifier = object.accuracyModifier ?? 0;
    message.enemyMissChance = object.enemyMissChance ?? 0;
    return message;
  },
};

function createBaseAreaList(): AreaList {
  return { areas: [] };
}

export const AreaList: MessageFns<AreaList> = {
  encode(message: AreaList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.areas) {
      Area.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AreaList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAreaList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.areas.push(Area.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AreaList {
    return { areas: globalThis.Array.isArray(object?.areas) ? object.areas.map((e: any) => Area.fromJSON(e)) : [] };
  },

  toJSON(message: AreaList): unknown {
    const obj: any = {};
    if (message.areas?.length) {
      obj.areas = message.areas.map((e) => Area.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AreaList>, I>>(base?: I): AreaList {
    return AreaList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AreaList>, I>>(object: I): AreaList {
    const message = createBaseAreaList();
    message.areas = object.areas?.map((e) => Area.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
